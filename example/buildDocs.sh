#!/usr/bin/env node
'use strict';
/**
 * This example script expects a JSON blob generated by react-docgen as input,
 * e.g. react-docgen components/* | buildDocs.sh
 */

var fs = require('fs');
var generateMarkdown = require('./generateMarkdown');
var path = require('path');

var json = '';
process.stdin.setEncoding('utf8');
process.stdin.on('readable', function() {
  var chunk = process.stdin.read();
  if (chunk !== null) {
    json += chunk;
  }
});

process.stdin.on('end', function() {
  buildDocs(JSON.parse(json));
});

function buildDocs(api) {
  // api is an object keyed by filepath. We use the file name as component name.
  for (var filepath in api) {
    const reactAPI = Array.isArray(api[filepath]) ? api[filepath][0] : api[filepath];
    var name = getComponentName(filepath);
    reactAPI.displayName = reactAPI.displayName || name;
    const filename = reactAPI.displayName.replace(/\s/g, '');
    if (!reactAPI || !reactAPI.props) {
      console.log(reactAPI);
      console.log(`Skipping over ${reactAPI.displayName} path: ${filepath}, unable to get meta data`);
      continue;
    } else {
      var markdown = generateMarkdown(reactAPI.displayName, reactAPI);
      fs.writeFileSync(filename + '.md', markdown);
      process.stdout.write(filepath + ' -> ' + filename + '.md\n');
    }
  }
}

function getComponentName(filepath) {
  var name = path.basename(filepath);

  var ext;
  while ((ext = path.extname(name))) {
    name = name.substring(0, name.length - ext.length);
  }

  if (name.indexOf('index') > -1) {
    name = filepath.replace(/index\.jsx?$/, '').match(/([^\/]*)\/*$/)[1]
  }

  return name;
}
